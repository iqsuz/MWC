#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.22
#  in conjunction with Tcl version 8.6
#    Jul 10, 2019 08:40:55 AM KORST  platform: Windows NT

import sys
from tkinter import messagebox
import openpyxl
import serial
import re
import time

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

####################################################
#
#   CONSTANTS
#
####################################################
PART_NO = 1
ALC = 2
W_LOWER = 3
W_UPPER = 4
MODEL = 5

L_REGISTER_TIME = 1
L_MODEL = 2
L_PART_BARCODE = 3
L_WEIGHT = 4
L_PART_NO = 5
L_ALC = 6
L_STATUS = 7

CONFIG_PATH = "U:\\config.xlsx"
LOG_PATH = "U:\\log_file.xlsx"
CONFIG_SHEET = "config"
COM_PORT = "COM1"

if __name__ == '__main__':
    import MWC_Lite
    MWC_Lite.vp_start_gui()


####################################################
#
#   Abort scaling and clean all textboxes.
#
####################################################
def abortProcess():
    abort()
    sys.stdout.flush()

####################################################
#
#   Close window with X symbol. This function is needed as screen maximized.
#
####################################################
def closeIt():
    destroy_window()
    sys.stdout.flush()

####################################################
#
#   Screen is maximized.
#   Focus cursor on part barcode when program is initiated.
#
####################################################
def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

    #maximize_screen()
    w.partBarcode.focus()

    w.partBarcode.bind('<Return>', onEnterPartBarcode)  #Call onEnterPartBarcode event when CR/LF received.
    w.partBarcode.bind('<Button-1>', onClickPartBarcode)    #Call onClickPartBarcode event when CR/LF received.

    insert_entry(w.procedure, "Put the box on scale, wait scale till stable and read part barcode.")
    change_entry_color(w.procedure, "yellow")


def destroy_window():
    # Function to close the windows.
    global top_level
    top_level.destroy()
    top_level = None

def maximize_screen():
    root.overrideredirect(True)
    root.geometry("{0}x{1}+0+0".format(root.winfo_screenwidth(), root.winfo_screenheight()))



def onEnterPartBarcode(event):
    part_barcode = w.partBarcode.get()
    part_barcode = part_barcode.upper()

    v_config = open_excel_sheet(CONFIG_PATH, CONFIG_SHEET)  #Get part spec from Excel file to compare.

    if v_config == None:
        return None

    up_low_weight = find_part_in_excel(v_config, part_barcode)  #Determine upper and lower spec from part number.

    if up_low_weight == None:
        insert_entry(w.procedure, "Part is not in DB. Please contact with supervisor or try again.")
        change_entry_color(w.procedure, "red")
        clean_entry(w.partBarcode)
        w.partBarcode.focus()
        return None

    actual_weight = get_weight(COM_PORT)    #Receive scaled weight via serial port
    #actual_weight = 205    #Debug parameter.

    if actual_weight == None:
        return None

    insert_entry(w.weight,actual_weight)

    if up_low_weight[1] <= actual_weight <= up_low_weight[0]:
        save_log("OK")
        showOK()
        abort()
        return None
    else:
        save_log("NG")
        showNG()
        abort()
        return None     
    
def onClickPartBarcode(event):
    abort()

def clean_entry(entry):
    entry.delete(0,len(entry.get()))

def abort():
    clean_entry(w.partBarcode)
    clean_entry(w.weight)
    clean_entry(w.partNo)
    clean_entry(w.ALC)
    clean_entry(w.procedure)
    clean_entry(w.model)

    change_entry_color(w.partBarcode, "white")
    change_entry_color(w.weight, "white")
    change_entry_color(w.partNo, "white")
    change_entry_color(w.ALC, "white")
    change_entry_color(w.procedure, "white")
    change_entry_color(w.model, "white")

def change_entry_color(entry, color):
    entry.configure(background = color)

####################################################
#
#   Get time stamp to register with part history.
#
####################################################

def get_time():
    import datetime
    time = datetime.datetime.now()
    timeStr = str(time.month)+'/'+str(time.day)+'/'+str(time.year)+' '+str(time.hour)+':'+\
    str(time.minute)+':'+str(time.second)

    return timeStr

####################################################
#
#   This function opens excel sheet with given parameters.
#
####################################################

def open_excel_sheet(f_path,sheet):
    try:
        config_excel = openpyxl.load_workbook(f_path)
    except Exception:
        messagebox.showerror('File Error','config Excel file either not exist or encrypted.\nPlease try to decrypt file.')
        print('config Excel file either not exist or encrypted.\nPlease try to decrypt file.')
        abort()
        return None

    config_sheet = config_excel[sheet]
    return config_sheet

####################################################
#
#   This function finds part spec based on part barcode.
#
####################################################

def find_part_in_excel(excel_sheet, part_barcode):

    for i in range(excel_sheet.max_row):
        f_part_no = excel_sheet.cell(i+1, PART_NO).value.upper()
        f_ALC = excel_sheet.cell(i+1, ALC).value.upper()
        f_model = excel_sheet.cell(i+1, MODEL).value.upper()

        if f_part_no == "END":
            
            return None

        if(part_barcode.find(f_part_no) >= 0 and part_barcode.find(f_ALC) >= 0):
            f_upper = int(excel_sheet.cell(i+1, W_UPPER).value)
            f_lower = int(excel_sheet.cell(i+1, W_LOWER).value)
            insert_entry(w.partNo, f_part_no)
            insert_entry(w.ALC, f_ALC)
            insert_entry(w.model, f_model)
            change_entry_color(w.partNo, "green2")
            change_entry_color(w.ALC, "green2")
            change_entry_color(w.partBarcode, "green2")
            change_entry_color(w.model, "green2")
            return [f_upper, f_lower]

    return None

####################################################
#
#   This function obtain weight from plain string.
#
####################################################
def convert_to_gram(raw_weight):
    str_weight = raw_weight.decode("utf-8")
    return int(str_weight[5:8])

####################################################
#
#   This function opens serial port and get scaled data.
#
####################################################
def get_weight(serial_port):
    try:
        ser = serial.Serial(serial_port)
    except Exception:
        messagebox.showerror("Serial Port Error","Error while trying to open Serial Port!\nCheck all cable connection or contact with Mehmet Ali IPSUZ from QC dept.")
        print("Error while trying to open Serial Port!\nCheck all cable connection or contact with Mehmet Ali IPSUZ from QC dept.")
        abort()
        return None

    ser.write(b'W')

    time.sleep(0.01)    #wait until scale become stable.

    scaled_weight = convert_to_gram(ser.readline())

    #don't forget to close serial port for the next scale.
    ser.close()     

    return scaled_weight


####################################################
#
#   This function saves log data to excel file.
#   If there is no excel file for the date, it will create one.
#
####################################################
def save_log(status):
    try:

        log_file = openpyxl.load_workbook(LOG_PATH)
    except Exception:
        messagebox.showerror("Error","Log file doesn't exist or encrypted. Please decrypt log_file.xlsx and try again.")
        print("Log file doesn't exist or encrypted. Please decrypt log_file.xlsx and try again.")
        abort()
        return None
        
    log_sheet = log_file['Sheet1']

    max_row = log_sheet.max_row

    v_part_barcode = w.partBarcode.get()
    v_part_barcode = re.sub('[^A-Za-z0-9]+','',v_part_barcode)  #regular expression here calculates any unknow character. If it finds any it will change it with "".
    log_sheet.cell(max_row+1, L_REGISTER_TIME).value = get_time()
    log_sheet.cell(max_row+1, L_MODEL).value = w.model.get()
    log_sheet.cell(max_row+1, L_PART_BARCODE).value = v_part_barcode
    log_sheet.cell(max_row+1, L_WEIGHT).value = w.weight.get()
    log_sheet.cell(max_row+1, L_PART_NO).value = w.partNo.get()
    log_sheet.cell(max_row+1, L_ALC).value = w.ALC.get()
    log_sheet.cell(max_row+1, L_STATUS).value = status

    try:
        log_file.save(LOG_PATH)
    except Exception:
        messagebox.showerror("Open File","Please close log_file.xlsx and re-scale part.")
        print("Please close log_file.xlsx and re-scale part.")
        abort()
        return None

def insert_entry(f_object, f_text):
    clean_entry(f_object)
    f_object.insert(0,f_text)


def showOK():
    Screen = tk.Tk()
    Screen.configure(background="green2")
    Screen.geometry("824x568+100+100")
    Screen.title("OK Screen")
    l_secondScreen = tk.Label(Screen)
    l_secondScreen.place(relx=0.35, rely=0.5, height=100, width=200, anchor="sw")
    l_secondScreen.configure(activebackground="green2")
    l_secondScreen.configure(activeforeground="black")
    l_secondScreen.configure(background="green2")
    l_secondScreen.configure(disabledforeground="#a3a3a3")
    l_secondScreen.configure(font="-family {Segoe UI} -size 70 -weight bold")
    l_secondScreen.configure(foreground="white")
    l_secondScreen.configure(highlightbackground="#d9d9d9")
    l_secondScreen.configure(highlightcolor="black")
    l_secondScreen.configure(text='''OK''')
    Screen.after(3000,lambda: Screen.destroy())

def showNG():
    Screen = tk.Tk()
    Screen.configure(background="red")
    Screen.geometry("824x568+100+100")
    Screen.wm_attributes("-topmost", 1) #keep NG window on top.
    Screen.title("NG Screen")
    l_secondScreen = tk.Label(Screen)
    l_secondScreen.place(relx=0.35, rely=0.5, height=100, width=200, anchor="sw")
    l_secondScreen.configure(activebackground="red")
    l_secondScreen.configure(activeforeground="black")
    l_secondScreen.configure(background="red")
    l_secondScreen.configure(disabledforeground="#a3a3a3")
    l_secondScreen.configure(font="-family {Segoe UI} -size 70 -weight bold")
    l_secondScreen.configure(foreground="#000000")
    l_secondScreen.configure(highlightbackground="#d9d9d9")
    l_secondScreen.configure(highlightcolor="black")
    l_secondScreen.configure(text='''NG''')
    #Screen.after(3000,lambda: Screen.destroy())
